// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/listener/Godeps/Godeps.json (149B)
// cmd/listener/main.go (7.479kB)

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdListenerGodepsGodepsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\xb1\x0a\xc2\x30\x10\x80\xe1\x39\x79\x8a\x72\xb3\x5c\x28\x82\x42\x67\x41\xdc\x3a\xb9\x48\x87\x34\x3d\x9a\xd8\x26\x17\x92\xd4\x45\x7c\x77\x31\x38\x74\xfd\x3f\xfe\xb7\x14\x70\xf3\x91\x53\xe9\x75\xb1\xd0\x35\x30\xbb\x62\xb7\x11\x0d\x7b\x35\x5a\x7e\xc6\x2d\xa9\x85\x52\xa0\x55\x19\x3f\xa9\xd5\xe5\x42\x81\x12\x1c\xa4\x80\x2b\xdf\x29\x65\xc7\xa1\x7e\xdc\x62\x7b\xfe\xf7\x89\xe2\x8e\x5e\xa7\x63\xed\xbd\x36\x8b\x9e\x29\x43\xd7\x3c\xa4\x10\x80\x0a\x11\x41\x8a\xe1\x87\x17\x8a\x15\x06\xf9\xf9\x06\x00\x00\xff\xff\xae\x1c\xde\x6e\x95\x00\x00\x00")

func cmdListenerGodepsGodepsJsonBytes() ([]byte, error) {
	return bindataRead(
		_cmdListenerGodepsGodepsJson,
		"cmd/listener/Godeps/Godeps.json",
	)
}

func cmdListenerGodepsGodepsJson() (*asset, error) {
	bytes, err := cmdListenerGodepsGodepsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/listener/Godeps/Godeps.json", size: 149, mode: os.FileMode(0644), modTime: time.Unix(1650426577, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf9, 0x86, 0x10, 0x62, 0x8b, 0xc8, 0xbf, 0x48, 0x29, 0xc4, 0x6d, 0xbf, 0x8a, 0x6f, 0x7, 0x4a, 0xcb, 0x34, 0x1f, 0xc6, 0x52, 0x79, 0x8d, 0x1b, 0xc, 0xad, 0x80, 0x90, 0xd7, 0xde, 0x32, 0x9d}}
	return a, nil
}

var _cmdListenerMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6d\x73\xdb\x36\xf2\x7f\x2d\x7e\x8a\x2d\x67\x9a\xa1\x12\x86\x72\xff\xff\xb4\xbd\x3a\xf5\x0b\xda\x96\x6d\x4e\xf5\x74\x94\xdc\x5c\x26\xcd\xa5\x10\xb9\x92\x50\x53\x00\x03\x80\x72\x3c\x39\x7f\xf7\x9b\x05\x28\x89\xb2\xa4\xb4\xf7\x38\xd7\x17\xa5\x0c\x60\x17\xbb\xbf\x7d\xc0\x0f\x48\xc9\xb2\x3b\x36\x47\x58\x32\x2e\x3c\xaf\xd3\x81\x0b\x59\x3e\x28\x3e\x5f\x18\x08\xb2\x36\xfc\xdf\xc9\x37\x7f\x82\xf3\x85\xfc\xad\xac\x14\x5c\x48\xa1\xab\xc2\x70\x31\x87\x91\xe2\x2b\x66\x10\x7a\x7c\xc9\x0d\xe6\x21\x24\x22\xe7\x2c\x82\xb8\x28\xc0\x4a\x6b\x50\xa8\x51\xad\x30\x8f\xac\xda\x11\xaa\x25\xd7\x9a\x4b\x01\x5c\xc3\x02\x15\x4e\x1f\x60\xae\x98\xb0\xd2\x33\x85\x08\x72\x06\xd9\x82\xa9\x39\x86\x60\x24\x30\xf1\x00\x25\x2a\x2d\x05\xc8\xa9\x61\x5c\xd0\xb6\x0c\x32\x59\x3e\x90\x3e\x39\x03\xb3\xe0\x1a\xb4\x9c\x99\x7b\xa6\x10\x98\xc8\x81\x69\x2d\x33\xce\x0c\xe6\x90\xcb\xac\x5a\xa2\x30\xcc\xd0\x96\x33\x5e\xa0\x86\xc0\x2c\x10\xfc\x71\x2d\xe1\xb7\xed\x3e\x39\xb2\x82\x14\x72\x01\x34\xbd\x9e\x85\x7b\x6e\x16\xb2\x32\xe4\x86\x51\x3c\x23\x35\x21\x70\x91\x15\x55\x4e\x96\xac\xa7\x0b\x02\xc0\x6d\x42\xe2\xce\x77\xd2\x67\x24\x54\x1a\x43\x6b\x70\x08\x4b\x99\xf3\x19\x7d\xd1\xfa\x57\x56\xd3\x82\xeb\x45\x08\x39\x27\xed\xd3\xca\x60\x08\x9a\x06\x33\x14\x24\xc5\x44\xde\x91\x0a\x34\x16\xd6\xb8\x4c\x96\x1c\xb5\x73\x7a\x6b\xa3\x5d\x46\x1b\x95\x04\xae\xa9\xe1\xd2\x34\x72\xbf\x90\xcb\x5d\x7f\xb8\xb5\x6a\x56\x29\xc1\xf5\x02\xad\x58\x2e\x41\x4b\xbb\xef\x6f\x98\x19\x1a\x21\x89\x99\x2c\x0a\x79\x4f\x3e\x66\x52\xe4\x9c\x5c\xd3\xa7\x36\x86\x93\x05\x02\x9b\xca\x15\x5a\xa7\x5c\x92\x08\x69\x78\xe6\xd0\xb7\xf1\x28\xb7\x71\xae\xa7\xf4\x82\x15\x05\x4c\xb1\x06\x0f\x73\xe0\x82\xb4\xd1\xe8\xda\x2f\x45\x46\x68\xc3\x84\xe1\xac\x80\x52\x2a\xbb\xeb\x53\x7f\x5d\x26\x4d\x6e\xba\x30\x1e\x5e\x4d\xde\xc4\x69\x17\x92\x31\x8c\xd2\xe1\xcf\xc9\x65\xf7\x12\xfc\x78\x0c\xc9\xd8\x0f\xe1\x4d\x32\xb9\x19\xde\x4e\xe0\x4d\x9c\xa6\xf1\x60\xf2\x16\x86\x57\x10\x0f\xde\xc2\x4f\xc9\xe0\x32\x84\xee\x5f\x46\x69\x77\x3c\x86\x61\x4a\xda\x92\xfe\xa8\x97\x74\x2f\x43\x48\x06\x17\xbd\xdb\xcb\x64\x70\x0d\xe7\xb7\x13\x18\x0c\x27\xd0\x4b\xfa\xc9\xa4\x7b\x09\x93\xa1\xdd\xb3\xd6\x96\x74\xc7\xa4\xaf\xdf\x4d\x2f\x6e\xe2\xc1\x24\x3e\x4f\x7a\xc9\xe4\x6d\x48\xba\xae\x92\xc9\x80\x34\x5f\x0d\x53\x88\x61\x14\xa7\x93\xe4\xe2\xb6\x17\xa7\x30\xba\x4d\x47\xc3\x71\x17\xe2\xc1\x25\x0c\x86\x83\x64\x70\x95\x26\x83\xeb\x6e\xbf\x3b\x98\x44\x90\x0c\x60\x30\x84\xee\xcf\xdd\xc1\x04\xc6\x37\x71\xaf\x47\xbb\x91\xba\xf8\x76\x72\x33\x4c\xc9\x50\xb8\x18\x8e\xde\xa6\xc9\xf5\xcd\x04\x6e\x86\xbd\xcb\x6e\x3a\x86\xf3\x2e\xf4\x92\xf8\xbc\xd7\x75\xbb\x0d\xde\xc2\x45\x2f\x4e\xfa\x21\x5c\xc6\xfd\xf8\xba\x6b\xa5\x86\x93\x9b\xae\x75\x92\x56\x3a\x33\xe1\xcd\x4d\x97\x46\x69\xd7\x78\x00\xf1\xc5\x24\x19\x0e\xc8\x9f\x8b\xe1\x60\x92\xc6\x17\x93\x10\x26\xc3\x74\xb2\x91\x7e\x93\x8c\xbb\x21\xc4\x69\x32\x26\x64\xae\xd2\x61\xdf\x7a\x4a\xe8\x0e\xaf\x68\x55\x32\x20\xd1\x41\xd7\x29\x22\xe4\x77\x03\x34\x4c\xed\xdf\xb7\xe3\xee\x46\x27\x5c\x76\xe3\x5e\x32\xb8\x1e\x43\x32\x78\x1a\xd0\xc8\xf3\xf8\x92\xe2\x0f\x81\xd7\xf2\x51\x64\x92\xaa\xad\xf3\x9b\x96\xc2\xa7\x01\xa5\xa4\xd2\xf4\x6b\x56\xb0\xb9\xfd\x2e\x0d\x7d\xb8\xec\x70\x59\x19\x5e\xd0\x1f\x85\xb4\x53\x02\x4d\xfd\xe9\x2c\x8c\x29\xe9\xb7\xb4\xb2\x54\x72\x62\xee\x7e\x3e\x88\x8c\xbe\x86\x2f\xd1\xf7\xda\x9e\x97\x49\xa1\x0d\x68\xc3\x0c\x52\xd3\x80\x33\xf0\x3b\x39\x33\xac\xb3\x19\x8a\x9c\x31\x9e\x79\x28\xd1\x2d\x04\x6d\x54\x95\x19\xf8\xec\xb5\xfa\x2c\x4b\xca\x3e\x2b\x01\x96\xac\x7c\xe7\x36\x7a\xef\x3e\xd0\xf8\xef\x57\xd2\x71\xea\x27\xa5\xf6\x7f\xb5\x42\x5d\xb1\x22\xa9\x86\xd0\xbe\x7c\x2d\xd4\x15\x2b\x92\x7a\xf4\xbc\x59\x25\x32\xdb\xb8\x83\x36\xed\xcd\xd4\x5c\xc3\xe9\x19\x48\x1d\xc5\x6a\xae\xbd\xd6\x4c\x2a\xe0\x21\x30\x35\xa7\x61\xc5\xc4\x1c\xc1\x2e\xfa\xec\xb5\x5a\x85\x9c\x47\x23\xc5\x85\x99\x05\x3e\xad\xf8\x7a\x75\x0a\x5f\x6b\x3f\xac\x25\xda\x5e\xeb\xd1\x6b\x91\xe7\x23\x85\x33\xfe\x89\x34\x10\xe6\xd1\xd8\x1a\x13\xf8\xa5\x1d\xf6\x43\xf0\xa7\xee\x78\xf8\x40\xbf\xdd\x28\xd0\xce\x24\x0b\x1a\x85\x81\x15\x67\x50\xe5\x25\x04\xd6\xa0\x1c\x85\xe1\x33\x9e\xb9\xa6\x59\x56\xaa\x94\x1a\xb5\xdf\xf6\x5a\x28\xd8\xb4\xc0\x11\x2a\xcd\xb5\x41\x91\xe1\x66\xd3\x73\x29\x8b\xc0\xdf\x9b\xf7\x43\x30\xaa\xc2\x10\x7c\xa6\x75\xb5\x44\x60\xb6\x07\xda\x59\x03\x2b\x59\xd0\x18\xd7\xb0\x94\x15\x9d\x33\xd4\xe1\x6c\x30\x69\x33\xab\x77\xc4\x94\xc6\xa0\x7d\x18\x2a\xbb\x82\x90\xb4\xf0\x3e\x81\x8c\x26\x8f\xc2\xc6\x67\xf0\xbc\x01\xdd\xd9\x59\x03\xa4\x3d\xf0\xbb\x69\x3a\x4c\x4f\x61\x59\x69\x03\xa5\x92\x2b\x9e\x23\xbc\xac\xd1\x6d\x7b\xad\x96\x42\x53\x29\x71\x4c\xef\x51\x7d\xb5\x0a\xc8\x98\x10\xd2\x50\xff\xfd\xc5\xff\xc5\x3f\xa0\xf1\xab\xe7\xfb\xb8\x93\x4e\xa9\xa3\xfe\x5d\xce\x55\x5c\x14\x81\xab\x01\x3f\x84\x93\xef\xbf\xfd\xb6\xf6\x91\xd2\xbc\x27\xb3\x3b\x02\x8c\xca\x28\x4a\xdf\xf4\x2b\x83\x9f\x3e\x3f\x52\x24\x57\x5f\x98\xd5\x6c\x85\x3b\x73\x9b\x99\x15\x53\xa0\x5d\x51\x79\x2d\x1d\x6d\xaa\xe9\x0c\x96\xec\x0e\x83\xbd\x9a\x68\xd7\xab\xea\xf2\xd9\x5f\x76\x40\xc2\x65\x75\x08\xa8\x14\x19\xe0\xda\x46\x94\x22\xcb\xaf\x78\x81\xc1\xa6\xce\xdb\x16\x1d\x5a\xf5\xd5\x19\x08\x5e\xec\x01\x9d\xc9\xaa\xc8\xe9\x94\x03\x85\x2c\xdf\xf6\x8c\x10\x96\xec\x61\x8a\xee\x3c\xe4\x1a\x66\x5c\x69\x03\x53\x29\xcd\x29\xf8\xf0\x82\x54\x46\x5d\x6a\x64\x41\x9b\xa0\x04\x2c\xb4\x43\xbc\xde\xee\xf4\x0c\xa8\xd2\xa3\x5b\xb1\x64\x8a\x4e\xcf\xc0\x19\xfc\x4c\xb7\x5f\x3f\xb5\x67\x37\x27\x19\x2f\x5c\x96\x97\x94\xd7\x75\x73\xb2\x5d\xe3\xc0\xc6\x14\xc4\x47\xcf\x6b\x15\x36\xe8\xa8\x92\x32\x84\xed\xef\x3e\xd3\x77\x1b\x8c\xe6\x68\x7a\x32\x63\x45\x52\x06\xbf\x8b\x4a\x9d\x7e\x5b\x5b\xe6\x68\xa0\x20\x69\x48\x46\xa7\xf0\xf5\xca\xb7\x6a\x77\xf3\xd0\xdb\x51\x31\x36\x4c\x59\x96\xb9\x26\x9e\x3f\xa1\x12\x58\x10\x59\xca\xe4\x0a\xd5\x03\x04\xd4\x4e\x16\xc8\x94\x99\x22\x33\x30\x55\x92\xe5\x19\xd3\xa6\x6d\x79\x19\x24\x23\x57\x93\x5b\x77\xd6\x6d\x8b\x1c\xe7\x62\x26\xc9\xab\x77\xef\xa7\x0f\x06\x83\x66\x45\xbd\x00\xff\x94\x90\x3a\x2c\x78\x9e\x0e\xe3\xcb\x8b\x78\x3c\xf9\x90\x8c\x56\xaf\x6c\xa3\xc0\x15\x2a\x8d\x04\x56\x70\x1c\x47\x87\xd9\xee\x18\x15\xef\x17\xe0\x5b\x2f\x7e\xc9\x4b\xc2\xec\x75\x73\xe0\xe5\x92\xe9\x3b\x37\xba\x4d\xc1\x8c\x15\x59\x55\x50\xbc\x37\x60\x00\xcb\x73\x85\x7a\x17\x88\x03\xb6\x35\xfb\x81\x96\xd9\x1d\x9a\x4d\xe0\x05\x9a\xe8\x92\xb3\xe2\xf6\x72\x14\xf8\x55\x5e\xbe\xf2\x43\xb2\x3a\x84\x67\x34\x73\x7b\x39\x8a\xf3\x5c\x91\x0b\x14\x5a\x80\x5d\x80\x42\xaf\xd5\x1a\x49\x65\x4e\xe1\x87\x1f\xbe\xfb\x3e\xf4\x5a\x8f\xbf\x97\x3c\xb3\xa5\x89\xc6\xe5\x2e\x12\x1b\x77\x36\x50\x6c\x53\x2b\x27\xb6\x48\xa9\xb0\xf5\x39\x93\x42\xa0\x65\xeb\x7e\xf8\xc4\x9e\xf6\x13\x5f\xe7\x12\xe8\x04\x75\x87\xe7\x4e\x10\x36\xea\xb8\x98\x47\x51\x64\x9b\x26\x9d\x10\xb6\xe2\x3e\x38\x74\xce\xc0\x61\x15\xbd\x51\xdc\x60\x40\x49\x45\xcb\x0e\x38\x78\x30\xc0\x47\xdd\xba\x57\xdc\xe6\xbe\x91\x0d\xaf\xc8\x47\xb7\xdd\x29\xf8\x2f\x1a\x75\xbc\xe7\xa3\xdd\x6f\xed\xa4\xad\xf1\x56\x8b\xc8\x4d\x34\x2e\x10\xcb\xe0\xdb\x93\x93\x13\x78\x0e\x76\xa4\xcf\x8b\x82\x6b\x24\x96\xbf\x6e\x07\x54\xde\x4b\x0a\x3c\x11\xa6\x68\x80\xf7\x63\xba\xc2\xf5\xab\x4f\x76\x22\xba\x61\x22\x2f\xf0\x8a\x40\xf3\x3b\x0a\xe7\x94\x49\xca\x0f\x1d\x8c\x0a\xb5\x13\x4b\x51\x97\x52\x68\xb4\xc0\xa8\x10\x14\x7e\x84\xe7\xf5\xcc\xc7\x0a\xa9\x4a\xeb\x6e\xa7\xf0\x63\xd4\x47\xb3\x90\x39\xe1\xe5\x8f\x86\xe3\x89\x3b\xcf\x5a\x0a\xb5\x03\xf6\x06\x59\x8e\x2a\xb0\xe2\x63\xc3\x4c\xa5\x07\xd2\x5c\xc9\xca\xd9\xbc\xf5\x94\x1c\xd5\x65\xc1\x0d\x65\xa4\x3d\x58\x1c\xc9\x8b\xc6\x34\x18\xd0\x4e\x29\x2e\xa5\x41\x9a\x0f\xa9\xcc\xdb\xce\x86\x02\x45\xb0\x11\x6c\xc3\x8f\xf0\xcd\x7e\x63\xdd\x95\xa6\x70\x85\x8d\xd2\x73\xcd\x56\xd9\x79\x5b\x73\xc0\x85\x91\xc0\xcb\x8e\x25\xb2\x99\x5c\x4e\xb9\x60\x75\x4a\xee\xaa\xda\xf7\x81\x0b\xba\x06\x65\x98\x94\xd6\x89\xb5\x61\xef\x4e\xde\x7b\xad\xd6\x92\x65\xb1\xab\x69\xd7\x7c\x3e\x46\xb7\x69\x2f\xfa\x73\x85\xea\x21\x68\x47\xd7\x68\x02\x7f\xc9\xb2\x0f\xeb\xba\x6f\x3f\x49\xeb\xa4\xd6\x0d\xeb\xd0\x61\xbe\xb7\xc6\x65\x23\xf1\x99\x8d\x21\x47\x97\x6c\xcd\xa1\x25\x9d\xce\x92\x65\xeb\x9e\x03\x67\xf6\xe6\xb6\x56\x02\x9c\x6e\x7d\xb0\xd2\x25\xdd\xfc\x3b\xab\xa9\xfc\xe4\xb5\x9e\x14\xe0\x96\x51\x44\xf4\xbf\xc0\x62\x93\xe3\x0c\x15\x6c\x67\x6e\x45\xb1\x99\xdb\xf2\x83\x77\x5b\x4b\xde\xc3\x59\xc3\x74\x5a\x36\x97\x40\x84\x23\xd0\x21\xac\x89\x87\x4d\x77\xab\x64\x4b\x54\xa2\x74\xb3\xab\xdb\xb4\x39\xd5\xd8\x16\xc5\x2a\x04\xe9\xb8\xcb\x96\x7a\x34\x2d\x70\x79\xf5\x95\xbc\x73\x6e\xa1\x58\x7d\x89\xbf\xec\x62\xbb\x64\xd9\x41\x70\x77\x16\xa1\x58\xd5\x8b\x1a\x16\xec\xad\x12\x92\x5c\x00\x8d\xc6\xd2\xf1\x35\x28\x94\x82\x65\xf1\xb0\x7e\xc3\x00\x5c\x96\xe6\x81\x2e\x1e\x7e\xdd\x04\x76\xe9\x91\x65\x22\xfd\x9a\x87\xa0\x58\xb5\xbd\x83\x2d\xee\x30\x2f\xaa\xf9\x8b\xb5\xc3\xc8\xe3\x4c\x64\xb7\x04\x76\x2b\x8f\x7a\xc9\xe6\xc5\xc5\x5e\x2a\x6a\xc2\x4d\x3f\x6d\x63\x5e\x9a\xe8\xaa\x3e\x34\x14\xea\x10\xfc\xe6\xf4\xe3\x7e\xe3\xd2\x68\x3e\xac\xd1\xf8\x80\x62\xf5\xbf\xd3\xc0\xfe\x89\xfa\x3e\xc6\x65\x89\xb5\x93\x82\x73\x99\x3f\x1c\x89\xd9\x17\x4c\x4c\x84\x41\x25\x58\x61\xdb\xbf\xb2\x91\x6a\xef\x88\x04\x35\x79\x6a\x06\x72\xdf\x1f\x57\x48\x6b\x33\xa2\x8b\x42\xba\xdb\x96\xe5\xf9\x94\x14\x7b\x05\xf1\x07\x58\x30\x25\xe1\x3e\x0f\xfe\xcf\x3b\xb3\x73\x88\x1f\x28\xac\xbd\x56\x7a\xac\x96\x0f\x97\x72\x5d\x5b\x8d\xae\x73\xbc\x1f\x35\xda\xd1\x91\x1e\x04\x67\xb4\xde\x3b\xda\xfd\xbe\x00\x57\x9c\x65\x58\x1a\xcc\x0f\x17\xcf\xda\x5b\xfd\xef\xab\x9a\xeb\xee\xbf\x54\x34\xdb\xc3\xe1\x69\x07\x6f\xcc\x34\x10\x3b\xde\xde\xb6\x07\xca\x7f\xb1\x62\x1e\x9b\xd1\x08\x1a\x5d\xab\x99\x26\x4f\x2e\x42\x2f\x61\x73\x94\xf7\x6a\x36\x0f\x1a\xd5\x8a\xda\xa4\x14\xf6\xfd\x14\xfe\xff\xe4\xe4\x84\x52\xd2\xda\xe8\x56\xc5\x22\xb7\xe6\x05\xfe\xa9\x9d\x0d\x61\xd9\xde\xbc\x23\x35\xef\x78\x10\x10\xbd\x4f\x46\x21\xb8\xef\xe6\x32\x28\x95\x0d\x22\x9f\xb1\x8c\x3a\x6d\xe3\x96\x60\xfd\xb7\xc3\x87\xaf\x88\x2e\x64\xb5\xbe\xcf\x8f\x4d\xcd\xf4\x97\x7b\xd8\x23\xc6\x49\x3d\xdf\x28\x8e\xd6\x19\x81\xe6\x5e\xaa\x3b\x22\x54\xb5\xf6\x03\x17\x68\xf7\x7a\xf3\x21\x04\x6b\xd6\xf6\xfd\xc6\x59\xb9\x47\xee\x67\x94\x46\xc0\xc4\x56\x29\x55\xe0\x2f\x44\xce\xac\x04\x05\x85\x3a\xec\xd6\x3f\x3b\x1c\x51\x69\x59\xe7\x0e\x65\x46\x26\x85\xe1\xa2\xc2\x3a\xa0\xb5\x41\xac\xe6\xa2\xf5\xd3\x1b\x29\xd8\x3f\x2e\xb9\xd0\x25\xdd\x58\xc4\x7c\x4d\x9e\xea\x8e\xc0\xd6\x04\x51\xdf\x73\x93\x2d\x60\x45\xaa\x68\x30\x0a\xcc\x43\x89\x35\x6b\xca\x98\x46\x78\xee\xd0\x1c\xa0\x39\xb5\x17\x00\xe2\x1f\xab\x28\x19\x45\x89\xee\x49\x59\x4e\x19\xe5\x3e\x3c\x7b\x06\xf5\xe0\x75\x21\xa7\xac\xb8\x15\x9c\x6e\x17\x8d\x99\x89\x7c\x15\xb4\xd7\x8e\xd9\x41\x7b\x57\xdd\xb9\xcc\xac\x43\xb9\x15\x08\xeb\x75\xf6\x6e\x68\xd7\x3c\xae\xef\x1e\xf6\x8d\xe1\x1f\x09\xfe\xf6\x72\x37\xe3\x22\xa7\x9b\xbc\x6c\x44\x4a\x3b\xfa\xb0\x73\x4f\x74\x6c\xd5\xce\xb6\x6d\x3a\x77\x3a\x90\x6e\xef\xe5\xe0\x36\xd7\xee\x9f\x67\x50\x57\x85\x01\x39\x03\xba\x43\xdb\x6b\xd6\x02\x69\x93\x35\x6d\xe5\xa5\xe3\x19\x34\x1d\xb9\xc2\x68\xde\xf1\x79\x09\xeb\xca\xa0\x15\x0d\x3f\xda\xf5\x6f\x02\x49\x50\xa0\xe8\x5e\xc1\x4b\x57\x0b\x82\x10\xa4\x81\xa5\x5d\xd9\xac\x07\x02\xec\xd1\x6b\xc9\xca\x90\x90\x65\x89\x9b\xda\x5b\xbf\x4b\xd2\xcc\xc9\x6b\xe0\xf0\x23\x88\xd7\xc0\x5f\xbc\x70\xef\x73\x95\x79\xc7\x2d\xdd\x2d\xe9\xfb\x37\x08\xfe\x4a\xea\xdf\xf1\xf7\xed\x26\xe8\xb2\x32\x9b\x1a\x77\x27\x81\x7b\x17\x0a\xa1\x68\x3c\xbe\xd5\x65\xbd\xce\xf8\x9a\x96\xdb\xc0\xb8\x02\x7a\x7a\x1a\x15\xd1\x1f\x6b\xa9\x47\x3b\xa9\x35\x0e\x95\x5a\x77\xf1\xd9\x13\x12\x63\xfb\xe1\xee\x8b\x9c\x23\x75\x21\x9c\x7c\xf7\xea\xd5\x41\x0a\xf0\x44\xe7\x0e\xc6\xc1\xbe\xc4\xe1\xb7\x33\x02\xa9\x7e\x3a\xb3\xff\x02\x60\xd9\x64\xf3\x55\xf0\xd1\x7b\xf4\xfe\x1e\x00\x00\xff\xff\xcc\x00\xbb\xeb\x37\x1d\x00\x00")

func cmdListenerMainGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdListenerMainGo,
		"cmd/listener/main.go",
	)
}

func cmdListenerMainGo() (*asset, error) {
	bytes, err := cmdListenerMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/listener/main.go", size: 7479, mode: os.FileMode(0644), modTime: time.Unix(1650461379, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x72, 0x75, 0x2e, 0xf4, 0xdd, 0xfa, 0xcd, 0xb0, 0x8e, 0x46, 0x69, 0xda, 0x57, 0xf6, 0xcc, 0x98, 0xca, 0x50, 0x28, 0x9c, 0x56, 0x47, 0x84, 0x83, 0xb, 0x29, 0xcd, 0x15, 0x13, 0x22, 0xca}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/listener/Godeps/Godeps.json": cmdListenerGodepsGodepsJson,
	"cmd/listener/main.go":            cmdListenerMainGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"listener": {nil, map[string]*bintree{
			"Godeps": {nil, map[string]*bintree{
				"Godeps.json": {cmdListenerGodepsGodepsJson, map[string]*bintree{}},
			}},
			"main.go": {cmdListenerMainGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
