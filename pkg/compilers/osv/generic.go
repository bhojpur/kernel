package osv

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import (
	"io/ioutil"
	"os"
	"path/filepath"
	"regexp"

	"github.com/bhojpur/kernel/pkg/types"
	"github.com/bhojpur/kernel/pkg/util/errors"
)

// ConvertParams contains all the information needed when bootstrapping.
type FinishParams struct {
	// CapstanImagePath points to image that was composed by Capstan
	CapstanImagePath string

	// CompileParams stores parameters that were used for composing image
	CompileParams types.CompileImageParams
}

// ImageFinisher implements conversion of Capstan result into provider-specific image.
// It should be implemented per provider. In this context converting means e.g.
// converting .qcow2 image (Capstan result) into .wmdk for VirtualBox provider.
type ImageFinisher interface {
	// Convert converts Capstan-provided image into appropriate format
	// for the provider
	FinishImage(params FinishParams) (*types.RawImage, error)

	// UseEc2 tells whether or not to prepare image for EC2 (Elastic Compute Cloud)
	UseEc2() bool
}

// addRuntimeStanzaToMetaRun assures that meta/run.yaml requires appropriate runtime.
// Runtime is required with a line "runtime: <runtime-name>".
// NOTE: this function should operate over a *copy* of original meta/run.yaml
//       so that user does not see the changes.
// See:
// https://github.com/mikelangelo-project/capstan/blob/master/Documentation/ConfigurationFiles.md
func addRuntimeStanzaToMetaRun(sourcesDir, runtime string) error {
	filepath := filepath.Join(sourcesDir, "meta", "run.yaml")

	// - Read.
	data, err := ioutil.ReadFile(filepath)
	if err != nil {
		return errors.New("failed to read meta/run.yaml file", err)
	}
	// - Modify.
	content := string(data)
	re := regexp.MustCompile("(?m)[\r\n]+^.*runtime:.*$")
	content = re.ReplaceAllString(content, "")
	content = "runtime: " + runtime + "\n\n" + content

	// - Write.
	if err = ioutil.WriteFile(filepath, []byte(content), 0644); err != nil {
		return errors.New("failed to write to meta/run.yaml", err)
	}

	return nil
}

// assureMetaPackage assures that meta/package.yaml exists.
// See:
// https://github.com/mikelangelo-project/capstan/blob/master/Documentation/ConfigurationFiles.md
func assureMetaPackage(sourcesDir string) error {
	filepath := filepath.Join(sourcesDir, "meta", "package.yaml")

	// Do nothing if meta/package.yaml already exist.
	if _, err := os.Stat(filepath); os.IsNotExist(err) {
		// Write.
		content := `
name: package.kernel
title: Capstan package auto-generated by Bhojpur Kernel
author: Bhojpur Consulting Private Limited, India
`
		if err := ioutil.WriteFile(filepath, []byte(content), 0644); err != nil {
			return errors.New("failed to write to meta/package.yaml", err)
		}
	}

	return nil
}
